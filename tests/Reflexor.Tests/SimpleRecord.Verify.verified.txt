namespace Test
{
    public partial struct SimpleRecordProxy
    {
        private readonly global::Test.SimpleRecord _target;
        
        public SimpleRecordProxy(global::Test.SimpleRecord target)
        {
            _target = target ?? throw new System.ArgumentNullException(nameof(target));
        }
        
        private readonly void ThrowInvalidOperationIfNotInitialized()
        {
            if (_target is null)
            {
                throw new global::System.InvalidOperationException("Proxy for 'Test.SimpleRecord' is uninitialized");
            }
        }
        
        public readonly global::System.Type EqualityContract
        {
            get
            {
                ThrowInvalidOperationIfNotInitialized();
                return GetEqualityContract(_target);
                
                [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "get_EqualityContract")]
                extern static global::System.Type GetEqualityContract(global::Test.SimpleRecord target);
            }
        }
        
        public readonly string Name
        {
            get
            {
                ThrowInvalidOperationIfNotInitialized();
                return GetName(_target);
                
                [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "get_Name")]
                extern static string GetName(global::Test.SimpleRecord target);
            }
            
            set
            {
                ThrowInvalidOperationIfNotInitialized();
                SetName(_target, value);
                
                [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Name")]
                extern static void SetName(global::Test.SimpleRecord target, string value);
            }
        }
        
        public readonly int Age
        {
            get
            {
                ThrowInvalidOperationIfNotInitialized();
                return GetAge(_target);
                
                [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "get_Age")]
                extern static int GetAge(global::Test.SimpleRecord target);
            }
            
            set
            {
                ThrowInvalidOperationIfNotInitialized();
                SetAge(_target, value);
                
                [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Age")]
                extern static void SetAge(global::Test.SimpleRecord target, int value);
            }
        }
        
        public override readonly string ToString()
        {
            return CallToString(_target);
            
            [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "ToString")]
            extern static string CallToString(global::Test.SimpleRecord target);
        }
        
        public readonly bool PrintMembers(global::System.Text.StringBuilder builder)
        {
            return CallPrintMembers(_target, builder);
            
            [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "PrintMembers")]
            extern static bool CallPrintMembers(global::Test.SimpleRecord target, global::System.Text.StringBuilder builder);
        }
        
        public override readonly int GetHashCode()
        {
            return CallGetHashCode(_target);
            
            [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "GetHashCode")]
            extern static int CallGetHashCode(global::Test.SimpleRecord target);
        }
        
        public override readonly bool Equals(object obj)
        {
            return CallEquals(_target, obj);
            
            [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "Equals")]
            extern static bool CallEquals(global::Test.SimpleRecord target, object obj);
        }
        
        public readonly bool Equals(global::Test.SimpleRecord other)
        {
            return CallEquals(_target, other);
            
            [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "Equals")]
            extern static bool CallEquals(global::Test.SimpleRecord target, global::Test.SimpleRecord other);
        }
        
        public readonly void Deconstruct(out string Name, out int Age)
        {
            CallDeconstruct(_target, out Name, out Age);
            
            [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "Deconstruct")]
            extern static void CallDeconstruct(global::Test.SimpleRecord target, out string Name, out int Age);
        }
        
    }
}